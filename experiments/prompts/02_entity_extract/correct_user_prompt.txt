## Task Requirements

Analyze the provided detection results and correct semantic inconsistencies, applying the following rules:

### Rule 1: Hierarchical Consistency Check
Resolve conflicts where a specific entity is detected but its general category appears in not_detected_objects:
- If "apple" is detected AND "fruit" is in not_detected_objects → move "fruit" to detected
- If "man" is detected AND "person" is in not_detected_objects → move "person" to detected  
- If "car" is detected AND "vehicle" is in not_detected_objects → move "vehicle" to detected
- Similar patterns apply to other hierarchical relationships (e.g., "dog"/"animal", "chair"/"furniture", etc.)
- **IMPORTANT**: Only move entities that already exist in not_detected_objects, never create new entities

### Rule 2: Synonym Consolidation
Handle semantically equivalent terms that appear in different categories:
- If "man" is detected AND "person" is in not_detected_objects → move "person" to detected
- If "automobile" is detected AND "car" is in not_detected_objects → move "car" to detected
- Apply the same logic to other synonym pairs (e.g., "couch"/"sofa", "child"/"kid", "feline"/"cat", etc.)
- **IMPORTANT**: Only move entities that already exist in not_detected_objects, never create new entities

### Rule 3: Logical Validation
Ensure the final classification makes semantic sense:
- Only move entities from not_detected_objects to detected_objects, never create new entities
- A general category should be moved to detected if its subcategory is detected AND the general category exists in not_detected_objects
- Synonyms should be moved to the same category if one is detected AND the synonym exists in not_detected_objects
- Apply these principles only to entities that already exist in the input lists
- If no semantic conflicts exist between the two lists, keep them unchanged

### Rule 4: Uncertain Objects Processing
Handle conflicts between not_detected_objects and uncertain_objects:
- If an entity in not_detected_objects has a hierarchical relationship with any entity in uncertain_objects → **DELETE** it from not_detected_objects
- If an entity in not_detected_objects is a synonym of any entity in uncertain_objects → **DELETE** it from not_detected_objects
- Examples:
  - If "fruit" is in not_detected_objects AND "apple" is in uncertain_objects → DELETE "fruit" from not_detected_objects
  - If "person" is in not_detected_objects AND "man" is in uncertain_objects → DELETE "person" from not_detected_objects
  - If "car" is in not_detected_objects AND "automobile" is in uncertain_objects → DELETE "car" from not_detected_objects
  - If "vehicle" is in not_detected_objects AND "car" is in uncertain_objects → DELETE "vehicle" from not_detected_objects
- **IMPORTANT**: This is deletion, not movement. The entity is completely removed from not_detected_objects
- **IMPORTANT**: uncertain_objects remains unchanged throughout the process

## Processing Order
1. First apply Rule 4 to clean not_detected_objects based on uncertain_objects
2. Then apply Rules 1-3 to handle detected_objects vs. not_detected_objects consistency
3. uncertain_objects always remains unchanged in the output

## Output Format
First provide your reasoning, then output the final answer in the specified JSON format.

**Step 1: Analysis**
Explain your reasoning for any changes needed, including:
- Rule 4 processing: any deletions from not_detected_objects due to uncertain_objects conflicts
- Rules 1-3 processing: any movements from not_detected_objects to detected_objects

**Step 2: Final Answer**
```json
{
  "detected_objects": ["entity1", "entity2", ...],
  "not_detected_objects": ["entity1", "entity2", ...],
  "uncertain_objects": ["entity1", "entity2", ...]
}
```

## Example

**Input:**
```json
{
  "detected_objects": ["apple", "man"],
  "not_detected_objects": ["fruit", "person", "car", "dog", "vehicle"],
  "uncertain_objects": ["chair", "automobile"]
}
```

**Output:**

**Step 1: Analysis**
I need to process the conflicts in the following order:

Rule 4 Processing (uncertain_objects conflicts):
1. "car" is in not_detected_objects, and "automobile" is in uncertain_objects - these are synonyms (car and automobile refer to the same thing). I should DELETE "car" from not_detected_objects.
2. Other entities in not_detected_objects ("fruit", "person", "dog", "vehicle") have no hierarchical or synonym relationships with uncertain_objects ("chair", "automobile"), so they remain.

Rules 1-3 Processing (detected vs not_detected consistency):
1. "apple" is in detected_objects, but "fruit" is in not_detected_objects - this is inconsistent since apple is a type of fruit. I should move "fruit" from not_detected_objects to detected_objects.
2. "man" is in detected_objects, but "person" is in not_detected_objects - this is inconsistent since man is a type of person. I should move "person" from not_detected_objects to detected_objects.
3. "dog" and "vehicle" have no related entities in detected_objects, so they remain in not_detected_objects.

**Step 2: Final Answer**
```json
{
  "detected_objects": ["apple", "man", "fruit", "person"],
  "not_detected_objects": ["dog", "vehicle"],
  "uncertain_objects": ["chair", "automobile"]
}
```

---

Now analyze the following detection results:

{detection_results}